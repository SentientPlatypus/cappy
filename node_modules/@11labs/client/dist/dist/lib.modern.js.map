{"version":3,"file":"lib.modern.js","sources":["../src/BaseConversation.ts","../src/utils/BaseConnection.ts","../src/version.ts","../src/utils/events.ts","../src/utils/overrides.ts","../src/utils/WebSocketConnection.ts","../src/utils/audio.ts","../src/utils/createWorkletModuleLoader.ts","../src/utils/rawAudioProcessor.ts","../src/utils/WebRTCConnection.ts","../src/utils/ConnectionFactory.ts","../src/utils/compatibility.ts","../src/utils/applyDelay.ts","../src/TextConversation.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/VoiceConversation.ts","../src/utils/postOverallFeedback.ts","../src/index.ts"],"sourcesContent":["import type {\n  BaseConnection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/BaseConnection\";\nimport type {\n  AgentAudioEvent,\n  AgentResponseEvent,\n  ClientToolCallEvent,\n  IncomingSocketEvent,\n  InternalTentativeAgentResponseEvent,\n  InterruptionEvent,\n  UserTranscriptionEvent,\n  VadScoreEvent,\n} from \"./utils/events\";\nimport type { InputConfig } from \"./utils/input\";\n\nexport type Role = \"user\" | \"ai\";\n\nexport type Mode = \"speaking\" | \"listening\";\n\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\n\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\n\nexport type PartialOptions = SessionConfig &\n  Partial<Callbacks> &\n  Partial<ClientToolsConfig> &\n  Partial<InputConfig>;\n\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\n\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio?: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n  onVadScore?: (props: { vadScore: number }) => void;\n};\n\nconst EMPTY_FREQUENCY_DATA = new Uint8Array(0);\n\nexport class BaseConversation {\n  protected lastInterruptTimestamp = 0;\n  protected mode: Mode = \"listening\";\n  protected status: Status = \"connecting\";\n  protected volume = 1;\n  protected currentEventId = 1;\n  protected lastFeedbackEventId = 0;\n  protected canSendFeedback = false;\n\n  protected static getFullOptions(partialOptions: PartialOptions): Options {\n    return {\n      clientTools: {},\n      onConnect: () => {},\n      onDebug: () => {},\n      onDisconnect: () => {},\n      onError: () => {},\n      onMessage: () => {},\n      onAudio: () => {},\n      onModeChange: () => {},\n      onStatusChange: () => {},\n      onCanSendFeedbackChange: () => {},\n      ...partialOptions,\n    };\n  }\n\n  protected constructor(\n    protected readonly options: Options,\n    protected readonly connection: BaseConnection\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n    this.connection.onMessage(this.onMessage);\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onModeChange(mode => this.updateMode(mode));\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession() {\n    return this.endSessionWithDetails({ reason: \"user\" });\n  }\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n    await this.handleEndSession();\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  protected async handleEndSession() {\n    this.connection.close();\n  }\n\n  protected updateMode(mode: Mode) {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  }\n\n  protected updateStatus(status: Status) {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  }\n\n  protected updateCanSendFeedback() {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  }\n\n  protected handleInterruption(event: InterruptionEvent) {\n    if (event.interruption_event) {\n      this.lastInterruptTimestamp = event.interruption_event.event_id;\n    }\n  }\n\n  protected handleAgentResponse(event: AgentResponseEvent) {\n    this.options.onMessage({\n      source: \"ai\",\n      message: event.agent_response_event.agent_response,\n    });\n  }\n\n  protected handleUserTranscript(event: UserTranscriptionEvent) {\n    this.options.onMessage({\n      source: \"user\",\n      message: event.user_transcription_event.user_transcript,\n    });\n  }\n\n  protected handleTentativeAgentResponse(\n    event: InternalTentativeAgentResponseEvent\n  ) {\n    this.options.onDebug({\n      type: \"tentative_agent_response\",\n      response:\n        event.tentative_agent_response_internal_event.tentative_agent_response,\n    });\n  }\n\n  protected handleVadScore(event: VadScoreEvent) {\n    if (this.options.onVadScore) {\n      this.options.onVadScore({\n        vadScore: event.vad_score_event.vad_score,\n      });\n    }\n  }\n\n  protected async handleClientToolCall(event: ClientToolCallEvent) {\n    if (\n      Object.prototype.hasOwnProperty.call(\n        this.options.clientTools,\n        event.client_tool_call.tool_name\n      )\n    ) {\n      try {\n        const result =\n          (await this.options.clientTools[event.client_tool_call.tool_name](\n            event.client_tool_call.parameters\n          )) ?? \"Client tool execution successful.\"; // default client-tool call response\n\n        // The API expects result to be a string, so we need to convert it if it's not already a string\n        const formattedResult =\n          typeof result === \"object\" ? JSON.stringify(result) : String(result);\n\n        this.connection.sendMessage({\n          type: \"client_tool_result\",\n          tool_call_id: event.client_tool_call.tool_call_id,\n          result: formattedResult,\n          is_error: false,\n        });\n      } catch (e) {\n        this.onError(\n          `Client tool execution failed with following error: ${(e as Error)?.message}`,\n          {\n            clientToolName: event.client_tool_call.tool_name,\n          }\n        );\n        this.connection.sendMessage({\n          type: \"client_tool_result\",\n          tool_call_id: event.client_tool_call.tool_call_id,\n          result: `Client tool execution failed: ${(e as Error)?.message}`,\n          is_error: true,\n        });\n      }\n    } else {\n      if (this.options.onUnhandledClientToolCall) {\n        this.options.onUnhandledClientToolCall(event.client_tool_call);\n\n        return;\n      }\n\n      this.onError(\n        `Client tool with name ${event.client_tool_call.tool_name} is not defined on client`,\n        {\n          clientToolName: event.client_tool_call.tool_name,\n        }\n      );\n      this.connection.sendMessage({\n        type: \"client_tool_result\",\n        tool_call_id: event.client_tool_call.tool_call_id,\n        result: `Client tool with name ${event.client_tool_call.tool_name} is not defined on client`,\n        is_error: true,\n      });\n    }\n  }\n\n  protected handleAudio(event: AgentAudioEvent) {}\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        this.handleInterruption(parsedEvent);\n        return;\n      }\n      case \"agent_response\": {\n        this.handleAgentResponse(parsedEvent);\n        return;\n      }\n      case \"user_transcript\": {\n        this.handleUserTranscript(parsedEvent);\n        return;\n      }\n      case \"internal_tentative_agent_response\": {\n        this.handleTentativeAgentResponse(parsedEvent);\n        return;\n      }\n      case \"client_tool_call\": {\n        await this.handleClientToolCall(parsedEvent);\n        return;\n      }\n      case \"audio\": {\n        this.handleAudio(parsedEvent);\n        return;\n      }\n\n      case \"vad_score\": {\n        this.handleVadScore(parsedEvent);\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onError(message: string, context?: any) {\n    console.error(message, context);\n    this.options.onError(message, context);\n  }\n\n  public getId() {\n    return this.connection.conversationId;\n  }\n\n  public isOpen() {\n    return this.status === \"connected\";\n  }\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted(isMuted: boolean) {\n    this.connection.setMicMuted(isMuted);\n  }\n\n  public getInputByteFrequencyData() {\n    return EMPTY_FREQUENCY_DATA;\n  }\n\n  public getOutputByteFrequencyData() {\n    return EMPTY_FREQUENCY_DATA;\n  }\n\n  public getInputVolume() {\n    return 0;\n  }\n\n  public getOutputVolume() {\n    return 0;\n  }\n\n  public sendFeedback(like: boolean) {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  }\n\n  public sendContextualUpdate(text: string) {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  }\n\n  public sendUserMessage(text: string) {\n    this.connection.sendMessage({\n      type: \"user_message\",\n      text,\n    });\n  }\n\n  public sendUserActivity() {\n    this.connection.sendMessage({\n      type: \"user_activity\",\n    });\n  }\n\n  public sendMCPToolApprovalResult(toolCallId: string, isApproved: boolean) {\n    this.connection.sendMessage({\n      type: \"mcp_tool_approval_result\",\n      tool_call_id: toolCallId,\n      is_approved: isApproved,\n    });\n  }\n}\n","import type { IncomingSocketEvent, OutgoingSocketEvent } from \"./events\";\nimport type { Mode } from \"../BaseConversation\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"hr\"\n  | \"sk\"\n  | \"no\"\n  | \"vi\"\n  | \"tl\";\n\nexport type DelayConfig = {\n  default: number;\n  android?: number;\n  ios?: number;\n};\n\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\n\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\n\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nexport type BaseSessionConfig = {\n  origin?: string;\n  authorization?: string;\n  livekitUrl?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n    conversation?: {\n      textOnly?: boolean;\n    };\n    client?: {\n      source?: string;\n      version?: string;\n    };\n  };\n  customLlmExtraBody?: unknown;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: DelayConfig;\n  textOnly?: boolean;\n  userId?: string;\n};\n\nexport type ConnectionType = \"websocket\" | \"webrtc\";\n\nexport type PublicSessionConfig = BaseSessionConfig & {\n  agentId: string;\n  connectionType: ConnectionType;\n  signedUrl?: never;\n  conversationToken?: never;\n};\n\nexport type PrivateWebSocketSessionConfig = BaseSessionConfig & {\n  signedUrl: string;\n  connectionType?: \"websocket\";\n  agentId?: never;\n  conversationToken?: never;\n};\n\nexport type PrivateWebRTCSessionConfig = BaseSessionConfig & {\n  conversationToken: string;\n  connectionType?: \"webrtc\";\n  agentId?: never;\n  signedUrl?: never;\n};\n\n// Union type for all possible session configurations\nexport type SessionConfig =\n  | PublicSessionConfig\n  | PrivateWebSocketSessionConfig\n  | PrivateWebRTCSessionConfig;\n\nexport abstract class BaseConnection {\n  public abstract readonly conversationId: string;\n  public abstract readonly inputFormat: FormatConfig;\n  public abstract readonly outputFormat: FormatConfig;\n\n  protected queue: IncomingSocketEvent[] = [];\n  protected disconnectionDetails: DisconnectionDetails | null = null;\n  protected onDisconnectCallback: OnDisconnectCallback | null = null;\n  protected onMessageCallback: OnMessageCallback | null = null;\n  protected onModeChangeCallback: ((mode: Mode) => void) | null = null;\n  protected onDebug?: (info: unknown) => void;\n\n  constructor(config: { onDebug?: (info: unknown) => void } = {}) {\n    this.onDebug = config.onDebug;\n  }\n\n  protected debug(info: unknown) {\n    if (this.onDebug) this.onDebug(info);\n  }\n\n  public abstract close(): void;\n  public abstract sendMessage(message: OutgoingSocketEvent): void;\n  public abstract setMicMuted(isMuted: boolean): Promise<void>;\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    const queue = this.queue;\n    this.queue = [];\n\n    if (queue.length > 0) {\n      // Make sure the queue is flushed after the constructors finishes and\n      // classes are initialized.\n      queueMicrotask(() => {\n        queue.forEach(callback);\n      });\n    }\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    const details = this.disconnectionDetails;\n    if (details) {\n      // Make sure the event is triggered after the constructors finishes and\n      // classes are initialized.\n      queueMicrotask(() => {\n        callback(details);\n      });\n    }\n  }\n\n  public onModeChange(callback: (mode: Mode) => void) {\n    this.onModeChangeCallback = callback;\n  }\n\n  protected updateMode(mode: Mode) {\n    this.onModeChangeCallback?.(mode);\n  }\n\n  protected disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n\n  protected handleMessage(parsedEvent: IncomingSocketEvent) {\n    if (this.onMessageCallback) {\n      this.onMessageCallback(parsedEvent);\n    } else {\n      this.queue.push(parsedEvent);\n    }\n  }\n}\n\nexport function parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = Number.parseInt(sampleRatePart);\n  if (Number.isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","// This file is auto-generated during build\nexport const PACKAGE_VERSION = \"0.5.0\";\n","import type { Language } from \"./connection\";\nimport type { CONVERSATION_INITIATION_CLIENT_DATA_TYPE } from \"./overrides\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\nexport type VadScoreEvent = {\n  type: \"vad_score\";\n  vad_score_event: {\n    vad_score: number;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent\n  | VadScoreEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: typeof CONVERSATION_INITIATION_CLIENT_DATA_TYPE;\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n    conversation?: {\n      text_only?: boolean;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n  user_id?: string;\n  source_info?: {\n    source?: string;\n    version?: string;\n  };\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type UserMessageEvent = {\n  type: \"user_message\";\n  text: string;\n};\nexport type UserActivityEvent = {\n  type: \"user_activity\";\n};\nexport type MCPToolApprovalResultEvent = {\n  type: \"mcp_tool_approval_result\";\n  tool_call_id: string;\n  is_approved: boolean;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent\n  | UserMessageEvent\n  | UserActivityEvent\n  | MCPToolApprovalResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import type { SessionConfig } from \"./BaseConnection\";\nimport type { InitiationClientDataEvent } from \"./events\";\n\nexport const CONVERSATION_INITIATION_CLIENT_DATA_TYPE =\n  \"conversation_initiation_client_data\";\n\nexport function constructOverrides(\n  config: SessionConfig\n): InitiationClientDataEvent {\n  const overridesEvent: InitiationClientDataEvent = {\n    type: CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n  };\n\n  if (config.overrides) {\n    overridesEvent.conversation_config_override = {\n      agent: {\n        prompt: config.overrides.agent?.prompt,\n        first_message: config.overrides.agent?.firstMessage,\n        language: config.overrides.agent?.language,\n      },\n      tts: {\n        voice_id: config.overrides.tts?.voiceId,\n      },\n      conversation: {\n        text_only: config.overrides.conversation?.textOnly,\n      },\n    };\n  }\n\n  if (config.customLlmExtraBody) {\n    overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n  }\n\n  if (config.dynamicVariables) {\n    overridesEvent.dynamic_variables = config.dynamicVariables;\n  }\n\n  if (config.userId) {\n    overridesEvent.user_id = config.userId;\n  }\n\n  if (config.overrides?.client) {\n    overridesEvent.source_info = {\n      source: config.overrides.client.source,\n      version: config.overrides.client.version,\n    };\n  }\n\n  return overridesEvent;\n}\n","import {\n  BaseConnection,\n  type SessionConfig,\n  type FormatConfig,\n  parseFormat,\n} from \"./BaseConnection\";\nimport { PACKAGE_VERSION } from \"../version\";\nimport {\n  type ConfigEvent,\n  isValidSocketEvent,\n  type OutgoingSocketEvent,\n} from \"./events\";\nimport { constructOverrides } from \"./overrides\";\n\nconst MAIN_PROTOCOL = \"convai\";\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class WebSocketConnection extends BaseConnection {\n  public readonly conversationId: string;\n  public readonly inputFormat: FormatConfig;\n  public readonly outputFormat: FormatConfig;\n\n  private constructor(\n    private readonly socket: WebSocket,\n    conversationId: string,\n    inputFormat: FormatConfig,\n    outputFormat: FormatConfig\n  ) {\n    super();\n    this.conversationId = conversationId;\n    this.inputFormat = inputFormat;\n    this.outputFormat = outputFormat;\n\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n        this.handleMessage(parsedEvent);\n      } catch (_) {}\n    });\n  }\n\n  public static async create(\n    config: SessionConfig\n  ): Promise<WebSocketConnection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      let url: string;\n\n      const version = config.overrides?.client?.version || PACKAGE_VERSION;\n      const source = config.overrides?.client?.source || \"js_sdk\";\n\n      if (config.signedUrl) {\n        const separator = config.signedUrl.includes(\"?\") ? \"&\" : \"?\";\n        url = `${config.signedUrl}${separator}source=${source}&version=${version}`;\n      } else {\n        url = `${origin}${WSS_API_PATHNAME}${config.agentId}&source=${source}&version=${version}`;\n      }\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent = constructOverrides(config);\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n\n        socket!.addEventListener(\"close\", reject);\n\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new WebSocketConnection(\n        socket,\n        conversation_id,\n        inputFormat,\n        outputFormat\n      );\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public async setMicMuted(isMuted: boolean): Promise<void> {\n    console.warn(\n      `WebSocket connection setMicMuted called with ${isMuted}, but this is handled by VoiceConversation`\n    );\n  }\n}\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const URLCache = new Map<string, string>();\n\nexport function createWorkletModuleLoader(name: string, sourceCode: string) {\n  return async (worklet: AudioWorklet) => {\n    const url = URLCache.get(name);\n    if (url) {\n      return worklet.addModule(url);\n    }\n\n    const blob = new Blob([sourceCode], { type: \"application/javascript\" });\n    const blobURL = URL.createObjectURL(blob);\n    try {\n      await worklet.addModule(blobURL);\n      URLCache.set(name, blobURL);\n      return;\n    } catch {\n      URL.revokeObjectURL(blobURL);\n    }\n\n    try {\n      // Attempting to start a conversation in Safari inside an iframe will\n      // throw a CORS error because the blob:// protocol is considered\n      // cross-origin. In such cases, fall back to using a base64 data URL:\n      const base64 = btoa(sourceCode);\n      const moduleURL = `data:application/javascript;base64,${base64}`;\n      await worklet.addModule(moduleURL);\n      URLCache.set(name, moduleURL);\n    } catch (error) {\n      throw new Error(\n        `Failed to load the ${name} worklet module. Make sure the browser supports AudioWorklets.`\n      );\n    }\n  };\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadRawAudioProcessor = createWorkletModuleLoader(\n  \"raw-audio-processor\",\n  // language=JavaScript\n  `\nconst BIAS = 0x84;\nconst CLIP = 32635;\nconst encodeTable = [\n  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n];\n\nfunction encodeSample(sample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let muLawSample;\n  sign = (sample >> 8) & 0x80;\n  if (sign !== 0) sample = -sample;\n  sample = sample + BIAS;\n  if (sample > CLIP) sample = CLIP;\n  exponent = encodeTable[(sample>>7) & 0xFF];\n  mantissa = (sample >> (exponent+3)) & 0x0F;\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\n  \n  return muLawSample;\n}\n\nclass RawAudioProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n              \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.isMuted = false;\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = data.sampleRate / 4;\n          this.format = data.format;\n\n          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n          break;\n        case \"setMuted\":\n          this.isMuted = data.isMuted;\n          break;\n      }\n    };\n  }\n  process(inputs) {\n    if (!this.buffer) {\n      return true;\n    }\n    \n    const input = inputs[0]; // Get the first input node\n    if (input.length > 0) {\n      let channelData = input[0]; // Get the first channel's data\n\n      // Resample the audio if necessary\n      if (this.resampler) {\n        channelData = this.resampler.full(channelData);\n      }\n\n      // Add channel data to the buffer\n      this.buffer.push(...channelData);\n      // Get max volume \n      let sum = 0.0;\n      for (let i = 0; i < channelData.length; i++) {\n        sum += channelData[i] * channelData[i];\n      }\n      const maxVolume = Math.sqrt(sum / channelData.length);\n      // Check if buffer size has reached or exceeded the threshold\n      if (this.buffer.length >= this.bufferSize) {\n        const float32Array = this.isMuted \n          ? new Float32Array(this.buffer.length)\n          : new Float32Array(this.buffer);\n\n        let encodedArray = this.format === \"ulaw\"\n          ? new Uint8Array(float32Array.length)\n          : new Int16Array(float32Array.length);\n\n        // Iterate through the Float32Array and convert each sample to PCM16\n        for (let i = 0; i < float32Array.length; i++) {\n          // Clamp the value to the range [-1, 1]\n          let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n          // Scale the sample to the range [-32768, 32767]\n          let value = sample < 0 ? sample * 32768 : sample * 32767;\n          if (this.format === \"ulaw\") {\n            value = encodeSample(Math.round(value));\n          }\n\n          encodedArray[i] = value;\n        }\n\n        // Send the buffered data to the main script\n        this.port.postMessage([encodedArray, maxVolume]);\n\n        // Clear the buffer after sending\n        this.buffer = [];\n      }\n    }\n    return true; // Continue processing\n  }\n}\nregisterProcessor(\"raw-audio-processor\", RawAudioProcessor);\n`\n);\n","import {\n  BaseConnection,\n  type SessionConfig,\n  type FormatConfig,\n  parseFormat,\n} from \"./BaseConnection\";\nimport { PACKAGE_VERSION } from \"../version\";\nimport { isValidSocketEvent, type OutgoingSocketEvent } from \"./events\";\nimport { Room, RoomEvent, Track, ConnectionState } from \"livekit-client\";\nimport type {\n  RemoteAudioTrack,\n  Participant,\n  TrackPublication,\n} from \"livekit-client\";\nimport {\n  constructOverrides,\n  CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n} from \"./overrides\";\nimport { arrayBufferToBase64 } from \"./audio\";\nimport { loadRawAudioProcessor } from \"./rawAudioProcessor\";\n\nconst DEFAULT_LIVEKIT_WS_URL = \"wss://livekit.rtc.elevenlabs.io\";\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\n// Convert WSS origin to HTTPS for API calls\nfunction convertWssToHttps(origin: string): string {\n  return origin.replace(/^wss:\\/\\//, \"https://\");\n}\n\nexport type ConnectionConfig = SessionConfig & {\n  onDebug?: (info: unknown) => void;\n};\n\nexport class WebRTCConnection extends BaseConnection {\n  public conversationId: string;\n  public readonly inputFormat: FormatConfig;\n  public readonly outputFormat: FormatConfig;\n\n  private room: Room;\n  private isConnected = false;\n  private audioEventId = 1;\n  private audioCaptureContext: AudioContext | null = null;\n\n  private constructor(\n    room: Room,\n    conversationId: string,\n    inputFormat: FormatConfig,\n    outputFormat: FormatConfig,\n    config: { onDebug?: (info: unknown) => void } = {}\n  ) {\n    super(config);\n    this.room = room;\n    this.conversationId = conversationId;\n    this.inputFormat = inputFormat;\n    this.outputFormat = outputFormat;\n\n    this.setupRoomEventListeners();\n  }\n\n  public static async create(\n    config: ConnectionConfig\n  ): Promise<WebRTCConnection> {\n    let conversationToken: string;\n\n    // Handle different authentication scenarios\n    if (\"conversationToken\" in config && config.conversationToken) {\n      // Direct token provided\n      conversationToken = config.conversationToken;\n    } else if (\"agentId\" in config && config.agentId) {\n      // Agent ID provided - fetch token from API\n      try {\n        const version = config.overrides?.client?.version || PACKAGE_VERSION;\n        const source = config.overrides?.client?.source || \"js_sdk\";\n        const configOrigin = config.origin ?? HTTPS_API_ORIGIN;\n        const origin = convertWssToHttps(configOrigin); //origin is wss, not https\n        const url = `${origin}/v1/convai/conversation/token?agent_id=${config.agentId}&source=${source}&version=${version}`;\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error(\n            `ElevenLabs API returned ${response.status} ${response.statusText}`\n          );\n        }\n\n        const data = await response.json();\n        conversationToken = data.token;\n\n        if (!conversationToken) {\n          throw new Error(\"No conversation token received from API\");\n        }\n      } catch (error) {\n        let msg = error instanceof Error ? error.message : String(error);\n        if (error instanceof Error && error.message.includes(\"401\")) {\n          msg =\n            \"Your agent has authentication enabled, but no signed URL or conversation token was provided.\";\n        }\n\n        throw new Error(\n          `Failed to fetch conversation token for agent ${config.agentId}: ${msg}`\n        );\n      }\n    } else {\n      throw new Error(\n        \"Either conversationToken or agentId is required for WebRTC connection\"\n      );\n    }\n\n    const room = new Room();\n\n    try {\n      // Create connection instance first to set up event listeners\n      const conversationId = `room_${Date.now()}`;\n      const inputFormat = parseFormat(\"pcm_48000\");\n      const outputFormat = parseFormat(\"pcm_48000\");\n      const connection = new WebRTCConnection(\n        room,\n        conversationId,\n        inputFormat,\n        outputFormat,\n        config\n      );\n\n      // Use configurable LiveKit URL or default if not provided\n      const livekitUrl = config.livekitUrl || DEFAULT_LIVEKIT_WS_URL;\n\n      // Connect to the LiveKit room and wait for the Connected event\n      await room.connect(livekitUrl, conversationToken);\n\n      // Wait for the Connected event to ensure isConnected is true\n      await new Promise<void>(resolve => {\n        if (connection.isConnected) {\n          resolve();\n        } else {\n          const onConnected = () => {\n            room.off(RoomEvent.Connected, onConnected);\n            resolve();\n          };\n          room.on(RoomEvent.Connected, onConnected);\n        }\n      });\n\n      if (room.name) {\n        connection.conversationId =\n          room.name.match(/(conv_[a-zA-Z0-9]+)/)?.[0] || room.name;\n      }\n\n      // Enable microphone and send overrides\n      await room.localParticipant.setMicrophoneEnabled(true);\n\n      const overridesEvent = constructOverrides(config);\n\n      connection.debug({\n        type: CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n        message: overridesEvent,\n      });\n\n      await connection.sendMessage(overridesEvent);\n\n      return connection;\n    } catch (error) {\n      await room.disconnect();\n      throw error;\n    }\n  }\n\n  private setupRoomEventListeners() {\n    this.room.on(RoomEvent.Connected, async () => {\n      this.isConnected = true;\n      console.info(\"WebRTC room connected\");\n    });\n\n    this.room.on(RoomEvent.Disconnected, reason => {\n      this.isConnected = false;\n      this.disconnect({\n        reason: \"agent\",\n        context: new CloseEvent(\"close\", { reason: reason?.toString() }),\n      });\n    });\n\n    this.room.on(RoomEvent.ConnectionStateChanged, state => {\n      if (state === ConnectionState.Disconnected) {\n        this.isConnected = false;\n        this.disconnect({\n          reason: \"error\",\n          message: `LiveKit connection state changed to ${state}`,\n          context: new Event(\"connection_state_changed\"),\n        });\n      }\n    });\n\n    // Handle incoming data messages\n    this.room.on(\n      RoomEvent.DataReceived,\n      (payload: Uint8Array, _participant) => {\n        try {\n          const message = JSON.parse(new TextDecoder().decode(payload));\n\n          // Filter out audio messages for WebRTC - they're handled via audio tracks\n          if (message.type === \"audio\") {\n            return;\n          }\n\n          if (isValidSocketEvent(message)) {\n            this.handleMessage(message);\n          } else {\n            console.warn(\"Invalid socket event received:\", message);\n          }\n        } catch (error) {\n          console.warn(\"Failed to parse incoming data message:\", error);\n          console.warn(\"Raw payload:\", new TextDecoder().decode(payload));\n        }\n      }\n    );\n\n    this.room.on(\n      RoomEvent.TrackSubscribed,\n      async (\n        track: Track,\n        _publication: TrackPublication,\n        participant: Participant\n      ) => {\n        if (\n          track.kind === Track.Kind.Audio &&\n          participant.identity.includes(\"agent\")\n        ) {\n          // Play the audio track\n          const remoteAudioTrack = track as RemoteAudioTrack;\n          const audioElement = remoteAudioTrack.attach();\n          audioElement.autoplay = true;\n          audioElement.controls = false;\n\n          // Add to DOM (hidden) to ensure it plays\n          audioElement.style.display = \"none\";\n          document.body.appendChild(audioElement);\n\n          // Set up audio capture for onAudio callback\n          await this.setupAudioCapture(remoteAudioTrack);\n        }\n      }\n    );\n\n    this.room.on(\n      RoomEvent.ActiveSpeakersChanged,\n      async (speakers: Participant[]) => {\n        if (speakers.length > 0) {\n          const participant = speakers[0];\n          if (participant.identity.includes(\"agent\")) {\n            this.updateMode(\"speaking\");\n          }\n        } else {\n          this.updateMode(\"listening\");\n        }\n      }\n    );\n  }\n\n  public close() {\n    if (this.isConnected) {\n      try {\n        // Explicitly stop all local tracks before disconnecting to ensure microphone is released\n        this.room.localParticipant.audioTrackPublications.forEach(\n          publication => {\n            if (publication.track) {\n              publication.track.stop();\n            }\n          }\n        );\n      } catch (error) {\n        console.warn(\"Error stopping local tracks:\", error);\n      }\n\n      // Clean up audio capture context (non-blocking)\n      if (this.audioCaptureContext) {\n        this.audioCaptureContext.close().catch(error => {\n          console.warn(\"Error closing audio capture context:\", error);\n        });\n        this.audioCaptureContext = null;\n      }\n\n      this.room.disconnect();\n    }\n  }\n\n  public async sendMessage(message: OutgoingSocketEvent) {\n    if (!this.isConnected || !this.room.localParticipant) {\n      console.warn(\n        \"Cannot send message: room not connected or no local participant\"\n      );\n      return;\n    }\n\n    // In WebRTC mode, audio is sent via published tracks, not data messages\n    if (\"user_audio_chunk\" in message) {\n      // Ignore audio data messages - audio flows through WebRTC tracks\n      return;\n    }\n\n    try {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(JSON.stringify(message));\n\n      await this.room.localParticipant.publishData(data, { reliable: true });\n    } catch (error) {\n      this.debug({\n        type: \"send_message_error\",\n        message: {\n          message,\n          error,\n        },\n      });\n      console.error(\"Failed to send message via WebRTC:\", error);\n    }\n  }\n\n  // Get the room instance for advanced usage\n  public getRoom(): Room {\n    return this.room;\n  }\n\n  public async setMicMuted(isMuted: boolean): Promise<void> {\n    if (!this.isConnected || !this.room.localParticipant) {\n      console.warn(\n        \"Cannot set microphone muted: room not connected or no local participant\"\n      );\n      return;\n    }\n\n    // Get the microphone track publication\n    const micTrackPublication = this.room.localParticipant.getTrackPublication(\n      Track.Source.Microphone\n    );\n\n    if (micTrackPublication?.track) {\n      try {\n        // Use LiveKit's built-in track muting\n        if (isMuted) {\n          await micTrackPublication.track.mute();\n        } else {\n          await micTrackPublication.track.unmute();\n        }\n      } catch (_error) {\n        // If track muting fails, fall back to participant-level control\n        await this.room.localParticipant.setMicrophoneEnabled(!isMuted);\n      }\n    } else {\n      // No track found, use participant-level control directly\n      await this.room.localParticipant.setMicrophoneEnabled(!isMuted);\n    }\n  }\n\n  private async setupAudioCapture(track: RemoteAudioTrack) {\n    try {\n      // Create audio context for processing\n      const audioContext = new AudioContext();\n      this.audioCaptureContext = audioContext;\n\n      // Create MediaStream from the track\n      const mediaStream = new MediaStream([track.mediaStreamTrack]);\n\n      // Create audio source from the stream\n      const source = audioContext.createMediaStreamSource(mediaStream);\n\n      // Load the raw audio processor worklet (reuse existing processor)\n      await loadRawAudioProcessor(audioContext.audioWorklet);\n\n      // Create worklet node for audio processing\n      const worklet = new AudioWorkletNode(audioContext, \"raw-audio-processor\");\n\n      // Configure the processor for the output format\n      worklet.port.postMessage({\n        type: \"setFormat\",\n        format: this.outputFormat.format,\n        sampleRate: this.outputFormat.sampleRate,\n      });\n\n      // Handle processed audio data\n      worklet.port.onmessage = (event: MessageEvent) => {\n        const [audioData, maxVolume] = event.data;\n\n        // Only send audio if there's significant volume (not just silence)\n        const volumeThreshold = 0.01;\n\n        if (maxVolume > volumeThreshold) {\n          // Convert to base64\n          const base64Audio = arrayBufferToBase64(audioData.buffer);\n\n          // Use sequential event ID for proper feedback tracking\n          const eventId = this.audioEventId++;\n\n          // Trigger the onAudio callback by simulating an audio event\n          this.handleMessage({\n            type: \"audio\",\n            audio_event: {\n              audio_base_64: base64Audio,\n              event_id: eventId,\n            },\n          });\n        }\n      };\n\n      // Connect the audio processing chain\n      source.connect(worklet);\n    } catch (error) {\n      console.warn(\"Failed to set up audio capture:\", error);\n    }\n  }\n}\n","import type {\n  BaseConnection,\n  SessionConfig,\n  ConnectionType,\n} from \"./BaseConnection\";\nimport { WebSocketConnection } from \"./WebSocketConnection\";\nimport { WebRTCConnection } from \"./WebRTCConnection\";\n\nfunction determineConnectionType(config: SessionConfig): ConnectionType {\n  // If connectionType is explicitly specified, use it\n  if (config.connectionType) {\n    return config.connectionType;\n  }\n\n  // If conversationToken is provided, use WebRTC\n  if (\"conversationToken\" in config && config.conversationToken) {\n    return \"webrtc\";\n  }\n\n  // Default to WebSocket for backward compatibility\n  return \"websocket\";\n}\n\nexport async function createConnection(\n  config: SessionConfig\n): Promise<BaseConnection> {\n  const connectionType = determineConnectionType(config);\n\n  switch (connectionType) {\n    case \"websocket\":\n      return WebSocketConnection.create(config);\n    case \"webrtc\":\n      return WebRTCConnection.create(config);\n    default:\n      throw new Error(`Unknown connection type: ${connectionType}`);\n  }\n}\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { isAndroidDevice, isIosDevice } from \"./compatibility\";\nimport type { DelayConfig } from \"./connection\";\n\nexport async function applyDelay(\n  delayConfig: DelayConfig = {\n    default: 0,\n    // Give the Android AudioManager enough time to switch to the correct audio mode\n    android: 3_000,\n  }\n) {\n  let delay = delayConfig.default;\n  if (isAndroidDevice()) {\n    delay = delayConfig.android ?? delay;\n  } else if (isIosDevice()) {\n    delay = delayConfig.ios ?? delay;\n  }\n\n  if (delay > 0) {\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n}\n","import { createConnection } from \"./utils/ConnectionFactory\";\nimport type { BaseConnection } from \"./utils/BaseConnection\";\nimport { applyDelay } from \"./utils/applyDelay\";\nimport { BaseConversation, type PartialOptions } from \"./BaseConversation\";\n\nexport class TextConversation extends BaseConversation {\n  public static async startSession(\n    options: PartialOptions\n  ): Promise<TextConversation> {\n    const fullOptions = BaseConversation.getFullOptions(options);\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let connection: BaseConnection | null = null;\n    try {\n      await applyDelay(fullOptions.connectionDelay);\n      connection = await createConnection(options);\n      return new TextConversation(fullOptions, connection);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      throw error;\n    }\n  }\n}\n","import { loadRawAudioProcessor } from \"./rawAudioProcessor\";\nimport type { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: true,\n        noiseSuppression: true,\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await loadRawAudioProcessor(context.audioWorklet);\n\n      const constraints = { voiceIsolation: true, ...options };\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: constraints,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadAudioConcatProcessor = createWorkletModuleLoader(\n  \"audio-concat-processor\",\n  // language=JavaScript\n  `\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\n\nexport function decodeSample(muLawSample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = (muLawSample & 0x80);\n  exponent = (muLawSample >> 4) & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\n  if (sign !== 0) sample = -sample;\n\n  return sample;\n}\n\nclass AudioConcatProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = []; // Initialize an empty buffer\n    this.cursor = 0;\n    this.currentBuffer = null;\n    this.wasInterrupted = false;\n    this.finished = false;\n    \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.format = data.format;\n          break;\n        case \"buffer\":\n          this.wasInterrupted = false;\n          this.buffers.push(\n            this.format === \"ulaw\"\n              ? new Uint8Array(data.buffer)\n              : new Int16Array(data.buffer)\n          );\n          break;\n        case \"interrupt\":\n          this.wasInterrupted = true;\n          break;\n        case \"clearInterrupted\":\n          if (this.wasInterrupted) {\n            this.wasInterrupted = false;\n            this.buffers = [];\n            this.currentBuffer = null;\n          }\n      }\n    };\n  }\n  process(_, outputs) {\n    let finished = false;\n    const output = outputs[0][0];\n    for (let i = 0; i < output.length; i++) {\n      if (!this.currentBuffer) {\n        if (this.buffers.length === 0) {\n          finished = true;\n          break;\n        }\n        this.currentBuffer = this.buffers.shift();\n        this.cursor = 0;\n      }\n\n      let value = this.currentBuffer[this.cursor];\n      if (this.format === \"ulaw\") {\n        value = decodeSample(value);\n      }\n      output[i] = value / 32768;\n      this.cursor++;\n\n      if (this.cursor >= this.currentBuffer.length) {\n        this.currentBuffer = null;\n      }\n    }\n\n    if (this.finished !== finished) {\n      this.finished = finished;\n      this.port.postMessage({ type: \"process\", finished });\n    }\n\n    return true; // Continue processing\n  }\n}\n\nregisterProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n`\n);\n","import { loadAudioConcatProcessor } from \"./audioConcatProcessor\";\nimport type { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await loadAudioConcatProcessor(context.audioWorklet);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { createConnection } from \"./utils/ConnectionFactory\";\nimport type { BaseConnection } from \"./utils/BaseConnection\";\nimport { WebRTCConnection } from \"./utils/WebRTCConnection\";\nimport type { AgentAudioEvent, InterruptionEvent } from \"./utils/events\";\nimport { applyDelay } from \"./utils/applyDelay\";\nimport {\n  BaseConversation,\n  type Options,\n  type PartialOptions,\n} from \"./BaseConversation\";\n\nexport class VoiceConversation extends BaseConversation {\n  public static async startSession(\n    options: PartialOptions\n  ): Promise<VoiceConversation> {\n    const fullOptions = BaseConversation.getFullOptions(options);\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: BaseConnection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      await applyDelay(fullOptions.connectionDelay);\n      connection = await createConnection(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new VoiceConversation(\n        fullOptions,\n        connection,\n        input,\n        output,\n        wakeLock\n      );\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n\n  protected constructor(\n    options: Options,\n    connection: BaseConnection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    super(options, connection);\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n  }\n\n  protected override async handleEndSession() {\n    await super.handleEndSession();\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    await this.input.close();\n    await this.output.close();\n  }\n\n  protected override handleInterruption(event: InterruptionEvent) {\n    super.handleInterruption(event);\n    this.fadeOutAudio();\n  }\n\n  protected override handleAudio(event: AgentAudioEvent) {\n    if (this.lastInterruptTimestamp <= event.audio_event.event_id) {\n      this.options.onAudio?.(event.audio_event.audio_base_64);\n\n      // Only play audio through the output worklet for WebSocket connections\n      // WebRTC connections handle audio playback directly through LiveKit tracks\n      if (!(this.connection instanceof WebRTCConnection)) {\n        this.addAudioBase64Chunk(event.audio_event.audio_base_64);\n      }\n\n      this.currentEventId = event.audio_event.event_id;\n      this.updateCanSendFeedback();\n      this.updateMode(\"speaking\");\n    }\n  }\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n\n    // TODO: When supported, maxVolume can be used to avoid sending silent audio\n    // const maxVolume = event.data[1];\n\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n      });\n    }\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public setMicMuted(isMuted: boolean) {\n    // Use LiveKit track muting for WebRTC connections\n    if (this.connection instanceof WebRTCConnection) {\n      this.connection.setMicMuted(isMuted);\n    } else {\n      // Use input muting for WebSocket connections\n      this.input.setMuted(isMuted);\n    }\n  }\n\n  public getInputByteFrequencyData() {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  }\n\n  public getOutputByteFrequencyData() {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  }\n\n  public getInputVolume() {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  }\n\n  public getOutputVolume() {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  }\n}\n","const HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n","import { BaseConversation, type PartialOptions } from \"./BaseConversation\";\nimport { TextConversation } from \"./TextConversation\";\nimport { VoiceConversation } from \"./VoiceConversation\";\n\nexport type {\n  Mode,\n  Role,\n  Options,\n  PartialOptions,\n  ClientToolsConfig,\n  Callbacks,\n  Status,\n} from \"./BaseConversation\";\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent, VadScoreEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  BaseSessionConfig,\n  DisconnectionDetails,\n  Language,\n  ConnectionType,\n} from \"./utils/BaseConnection\";\nexport { createConnection } from \"./utils/ConnectionFactory\";\nexport { WebSocketConnection } from \"./utils/WebSocketConnection\";\nexport { WebRTCConnection } from \"./utils/WebRTCConnection\";\nexport { postOverallFeedback } from \"./utils/postOverallFeedback\";\n\nexport class Conversation extends BaseConversation {\n  public static startSession(options: PartialOptions): Promise<Conversation> {\n    return options.textOnly\n      ? TextConversation.startSession(options)\n      : VoiceConversation.startSession(options);\n  }\n}\n"],"names":["EMPTY_FREQUENCY_DATA","Uint8Array","BaseConversation","getFullOptions","partialOptions","_extends","clientTools","onConnect","onDebug","onDisconnect","onError","onMessage","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","constructor","options","connection","_this","this","lastInterruptTimestamp","mode","status","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSessionWithDetails","async","details","updateStatus","handleEndSession","parsedEvent","type","handleInterruption","handleAgentResponse","handleUserTranscript","handleTentativeAgentResponse","handleClientToolCall","handleAudio","handleVadScore","sendMessage","event_id","ping_event","setVolume","conversationId","updateMode","endSession","reason","close","updateCanSendFeedback","event","interruption_event","source","message","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","onVadScore","vadScore","vad_score_event","vad_score","Object","prototype","hasOwnProperty","call","client_tool_call","tool_name","_await$this$options$c","result","parameters","formattedResult","JSON","stringify","String","tool_call_id","is_error","e","clientToolName","onUnhandledClientToolCall","context","console","error","getId","isOpen","setMicMuted","isMuted","getInputByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","warn","sendContextualUpdate","text","sendUserMessage","sendUserActivity","sendMCPToolApprovalResult","toolCallId","isApproved","is_approved","BaseConnection","config","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","onModeChangeCallback","debug","info","callback","length","queueMicrotask","forEach","_this$onModeChangeCal","disconnect","_this$onDisconnectCal","handleMessage","push","parseFormat","format","formatPart","sampleRatePart","split","includes","Error","sampleRate","Number","parseInt","isNaN","PACKAGE_VERSION","isValidSocketEvent","CONVERSATION_INITIATION_CLIENT_DATA_TYPE","constructOverrides","_config$overrides","overridesEvent","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","_config$overrides$con","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","conversation","text_only","textOnly","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","userId","user_id","client","source_info","version","WebSocketConnection","socket","inputFormat","outputFormat","super","addEventListener","setTimeout","code","parse","data","_","create","_config$origin","_config$overrides2","origin","url","signedUrl","separator","agentId","protocols","authorization","WebSocket","conversationConfig","Promise","resolve","reject","_socket","send","once","conversation_initiation_metadata_event","conversation_id","agent_output_audio_format","user_input_audio_format","_socket2","arrayBufferToBase64","b","buffer","window","btoa","fromCharCode","base64ToArrayBuffer","base64","binaryString","atob","len","bytes","i","charCodeAt","URLCache","Map","createWorkletModuleLoader","name","sourceCode","get","worklet","addModule","blob","Blob","blobURL","URL","createObjectURL","set","_unused","revokeObjectURL","moduleURL","loadRawAudioProcessor","WebRTCConnection","room","isConnected","audioEventId","audioCaptureContext","setupRoomEventListeners","conversationToken","replace","fetch","ok","statusText","json","token","msg","Room","Date","now","livekitUrl","_room$name$match","connect","onConnected","off","RoomEvent","Connected","on","match","localParticipant","setMicrophoneEnabled","Disconnected","CloseEvent","toString","ConnectionStateChanged","state","ConnectionState","Event","DataReceived","payload","_participant","TextDecoder","decode","TrackSubscribed","track","_publication","participant","kind","Track","Kind","Audio","identity","remoteAudioTrack","audioElement","attach","autoplay","controls","style","display","document","body","appendChild","setupAudioCapture","ActiveSpeakersChanged","speakers","audioTrackPublications","publication","stop","catch","TextEncoder","encode","publishData","reliable","getRoom","micTrackPublication","getTrackPublication","Source","Microphone","mute","unmute","_error","audioContext","AudioContext","mediaStream","MediaStream","mediaStreamTrack","createMediaStreamSource","audioWorklet","AudioWorkletNode","port","postMessage","onmessage","audioData","maxVolume","base64Audio","eventId","audio_event","audio_base_64","createConnection","connectionType","determineConnectionType","isIosDevice","navigator","platform","userAgent","applyDelay","delayConfig","default","android","delay","_delayConfig$android","test","_delayConfig$ios","ios","TextConversation","startSession","fullOptions","connectionDelay","_connection","Input","preferHeadphonesForIosDevices","inputStream","ideal","echoCancellation","noiseSuppression","idealDevice","mediaDevices","enumerateDevices","find","d","keyword","label","toLowerCase","deviceId","supportsSampleRateConstraint","getSupportedConstraints","analyser","createAnalyser","constraints","voiceIsolation","getUserMedia","audio","resume","_inputStream","_context","getTracks","setMuted","loadAudioConcatProcessor","Output","gain","createGain","destination","VoiceConversation","_options$useWakeLock","input","output","preliminaryInputStream","wakeLock","useWakeLock","request","_preliminaryInputStre","all","_preliminaryInputStre2","_input","_output","_wakeLock","release","inputFrequencyData","outputFrequencyData","onInputWorkletMessage","user_audio_chunk","onOutputWorkletMessage","finished","addAudioBase64Chunk","chunk","value","fadeOutAudio","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","_this$wakeLock","_this$options$onAudio","_this$options","_this$inputFrequencyD","frequencyBinCount","getByteFrequencyData","_this$outputFrequency","postOverallFeedback","method","feedback","headers","Conversation"],"mappings":"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"}